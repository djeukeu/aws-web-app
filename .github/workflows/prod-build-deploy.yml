name: Provision, Build and Deploy Web app to production
run-name: ${{ github.actor }} triggered the production deployment

on:
  push:
    branches:
      - master

jobs:
  stack_build_deploy:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      # - name: Write stack 1 parameters file
      #   run: echo '${{ secrets.PROD_STACK_PARAMETER_ONE }}' > parameters-1.json
      # - name: Configure AWS credentials
      #   uses: aws-actions/configure-aws-credentials@v4
      #   with:
      #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     aws-region: ${{ secrets.AWS_REGION }}
      # - name: Provision AWS Stack-1 
      #   id: stack
      #   uses: aws-actions/aws-cloudformation-github-deploy@v1
      #   with:
      #     name: '${{secrets.APP_NAME}}-1'
      #     template: './infrastructure/cloudformation/prod-stack-1.yml'
      #     parameter-overrides: 'file:///${{ github.workspace }}/parameters-1.json'
      #     no-fail-on-empty-changeset: 1
      # - name: Read node version
      #   id: nvmrc
      #   uses: browniebroke/read-nvmrc-action@v1
      # - name: Setup Nodejs
      #   uses: actions/setup-node@v4
      #   with:
      #     node-version: '${{ steps.nvmrc.outputs.node_version }}'
      # - uses: xt0rted/setup-dotnet@v1.0.0
      # - name: Setup Gitversion
      #   uses: gittools/actions/gitversion/setup@v1.1.1
      #   with:
      #     versionSpec: '5.12.0'
      # - name: Execute Gitversion
      #   id: gitversion
      #   uses: gittools/actions/gitversion/execute@v1.1.1
      #   with:
      #     configFilePath: GitVersion.yml
      #     useConfigFile: true
      # - name: Install project dependencies
      #   run: |
      #     yarn
      # - name: Login to AWS ECR
      #   uses: aws-actions/amazon-ecr-login@v2
      #   id: login-ecr
      # - name: Build, tag, and push image to Amazon ECR
      #   id: ecr-image
      #   env:
      #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      #     ECR_REPOSITORY: ${{steps.stack.outputs.ecrrepositoryname}}
      #     IMAGE_TAG: ${{ steps.gitversion.outputs.major }}.${{ steps.gitversion.outputs.minor }}.${{ steps.gitversion.outputs.commitsSinceVersionSource }}
      #   run: |
      #     docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
      #     docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      #     echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
      - name: Write stack 2 parameters file
        run: echo '${{ secrets.PROD_STACK_PARAMETER_TWO }}' > parameters-2.json
      - name: Set the image name in parameters file
        run: |
          sed -i 's/ImageValue/new/611500158127.dkr.ecr.us-east-2.amazonaws.com/patricias-repo:1.0.34/' parameters-2.json > parameters.json
      # - name: Provision AWS Stack-2 
      #   uses: aws-actions/aws-cloudformation-github-deploy@v1
      #   with:
      #     name: '${{secrets.APP_NAME}}-2'
      #     template: './infrastructure/cloudformation/prod-stack-2.yml'
      #     parameter-overrides: 'file:///${{ github.workspace }}/parameters.json'
      #     no-fail-on-empty-changeset: 1
      # - name: Cache node modules
      #   uses: actions/cache@v4
      #   with:
      #     path: node_modules
      #     key: ${{ runner.os }}-node-${{ hashFiles('**/package.json') }}
      #     restore-keys: |
      #       ${{ runner.os }}-node-
