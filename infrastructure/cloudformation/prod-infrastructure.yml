---
Parameters:
  # UserName:
  #   Type: String
  #   Description: The name of the IAM user for the access key
  HealthCheckPath:
    Type: String
    Default: /
    Description: Health Check path for the server
  ContainerPort:
    Type: Number
    Default: 80
    Description: Open port for the container
  DesiredCapacity:
    Type: Number
    Default: 1
    Description: Number of instances to launch in the ECS cluster.

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Sub ${AWS::Region}a
      CidrBlock: 10.0.0.0/16
      MapPublicIpOnLaunch: true
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Sub ${AWS::Region}b
      CidrBlock: 10.0.16.0/16
      MapPublicIpOnLaunch: true
  PublicSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Sub ${AWS::Region}c
      CidrBlock: 10.0.32.0/16
      MapPublicIpOnLaunch: true
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  RouteTrafficToIGW:
    Type: AWS::EC2::Route
    DependsOn:
      - InternetGateway
      - AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      GatewayId: !Ref InternetGateway
      DestinationCidrBlock: 0.0.0.0/0
  PublicSubnetRouteTableAssociationA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetRouteTableAssociationB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetRouteTableAssociationC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetC
      RouteTableId: !Ref PublicRouteTable
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Application load balancer security group for HTTP access
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 80
          ToPort: 80
  ServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable access to the server
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 3000
          ToPort: 3000
  HttpTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${AWS::StackName}-tg
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: !Ref HealthCheckPath
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref VPC
      TargetType: ip
  HTTPListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: "HTTP"
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref HttpTargetGroup
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${AWS::StackName}-alb
      Scheme: "internet-facing"
      Type: "application"
      Subnets: 
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB
        - !Ref PublicSubnetC
      SecurityGroups: 
        - !Ref ALBSecurityGroup
      IpAddressType: "ipv4"
  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub ${AWS::StackName}-repo
  ServerCluster: 
    Type: AWS::ECS::CLUSTER
    Properties:
      ClusterName: !Sub ${AWS::StackName}-cluster
      CapacityProviders:
        - FARGATE
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
      - HttpTargetGroup
      - HTTPListener
    Properties:
      RequiresCompatibilities:
        - FARGATE
      Family: !Ref ${AWS::StackName}
      ContainerDefinitions:
        - name: !Ref ${AWS::StackName}
          Image: !Join 
            - ':'
            - - !Join 
                - /
                - - !GetAtt ECRRepository.Arn
                  - !Ref ECRRepository
              - latest
          Essential: true
          PortMappings:
            - HostPort: !Ref ContainerPort
              protocol: tcp
              ContainerPort: !Ref ContainerPort
      NetworkMode: awsvpc
      Memory: '512'
      Cpu: '256'
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
  User:
    Type: AWS::IAM:User
    Properties:
      UserName: !Ref UserName
  MyAccessKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref User
      Status: 'Active'
  ECSTaskExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub ${AWS::StackName}-role
      AssumeRolePolicyDocument:
        Version: "2008-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-role-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 
                  - "ecr:GetAuthorizationToken"
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:BatchGetImage"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: !GetAtt ECRRepository.Arn
  UserInlinePolicy:
    Type: AWS::IAM:Policy
    DependsOn:
      - ECRRepository
    Properties:
      PolicyName: !Sub ${AWS::StackName}-policy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: 'ECR'
            Effect: 'Allow'
            Action:
              - 'ecr:BatchCheckLayerAvailability'
              - 'ecr:InitiateLayerUpload'
              - 'ecr:UploadLayerPart'
              - 'ecr:CompleteLayerUpload'
              - 'ecr:PutImage'
              - 'ecr:BatchGetImage'
              - 'ecr:BatchImportUpstreamImage'
              - 'ecr:GetDownloadUrlForLayer'
              - 'ecr:GetImageCopyStatus'
            Resource: !GetAtt ECRRepository.Arn
          - Effect: 'Allow'
            Action:
              - 'ecr:GetAuthorizationToken'
            Resource: '*'
          - Sid: 'RegisterTaskDefinition'
            Effect: 'Allow'
            Action:
              - ecs:RegisterTaskDefinition
            Resource: '*'
          - Sid: 'PassRolesInTaskDefinition'
            Effect: 'Allow'
            Action:
              - iam:PassRole
            Resource: !GetAtt ECSTaskExecutionRole.Arn
          - Sid: 'DeployService'
            Effect: 'Allow'
            Action:
              - 'ecs:UpdateService'
              - 'ecs:DescribeServices'
            Resource: !Ref ECSService
      User:
        - !Ref User
  ECSService:
    Type: 'AWS::ECS::Service'
    DependsOn: TaskDefinition
    Properties:
      ServiceName: !Sub ${AWS::StackName}
      Cluster: !GetAtt ServerCluster.Arn
      LaunchType: FARGATE
      DesiredCount: !Ref DesiredCapacity
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      HealthCheckGracePeriodSeconds: 5
      TaskDefinition: !Ref TaskDefinition
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups: 
            - !GetAtt ServerSecurityGroup.GroupId
          Subnets: 
            - !Ref PublicSubnetA
            - !Ref PublicSubnetB
            - !Ref PublicSubnetC
          AssignPublicIp: ENABLED
      LoadBalancers:
        - ContainerName: !Ref ${AWS::StackName}
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref HttpTargetGroup
          LoadBalancerName: !GetAtt ApplicationLoadBalancer.LoadBalancerName
  

Outputs:
  LoadBalancerDNS:
    Description: Load Balancer DNS name to access the server 
    Value: !GetAtt ApplicationLoadBalancer.DNSName
  UserAccessKeyId:
    Description: User access key ID
    Value: !GetAtt MyAccessKey.Id
  UserAccessKeySecret:
    Description: User secret access key
    Value: !GetAtt MyAccessKey.SecretAccessKey
