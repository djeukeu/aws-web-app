---
Parameters:
  UserName:
    Type: String
    Description: The name of the IAM user for the access key

Resources:
  User:
    Type: AWS::IAM:User
    Properties:
      UserName: !Ref UserName
  MyAccessKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref User
      Status: 'Active'
  UserInlinePolicy:
    Type: AWS::IAM:Policy
    Properties:
      PolicyName: !Ref 'AWS::StackName'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: 'ECR'
            Effect: 'Allow'
            Action:
              - 'ecr:BatchCheckLayerAvailability'
              - 'ecr:InitiateLayerUpload'
              - 'ecr:UploadLayerPart'
              - 'ecr:CompleteLayerUpload'
              - 'ecr:PutImage'
              - 'ecr:BatchGetImage'
              - 'ecr:BatchImportUpstreamImage'
              - 'ecr:GetDownloadUrlForLayer'
              - 'ecr:GetImageCopyStatus'
            Resource: !GetAtt ECRRegistry.Arn
          - Effect: 'Allow'
            Action:
              - 'ecr:GetAuthorizationToken'
            Resource: '*'
          - Sid: 'RegisterTaskDefinition'
            Effect: 'Allow'
            Action:
              - ecs:RegisterTaskDefinition
            Resource: '*'
          - Sid: 'PassRolesInTaskDefinition'
            Effect: 'Allow'
            Action:
              - iam:PassRole
            # Resource: ""
          - Sid: 'DeployService'
            Effect: 'Allow'
            Action:
              - 'ecs:UpdateService'
              - 'ecs:DescribeServices'
            # Resource: ""
      User:
        - !Ref User
  ECRRegistry:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub ${AWS::StackName}-repo
      ImageTagMutability: 'IMMUTABLE'

Outputs:
  UserAccessKeyId:
    Description: User access key ID
    Value: !GetAtt MyAccessKey.Id
  UserAccessKeySecret:
    Description: User secret access key
    Value: !GetAtt MyAccessKey.SecretAccessKey
