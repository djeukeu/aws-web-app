---
Parameters:
  UserName:
    Type: String
    Description: The name of the IAM user for the access key
  HealthCheckPath:
    Type: String
    Default: /
    Description: Health Check path for the container
  ContainerPort:
    Type: Number
    Default: 80
    Description: Open Port for the container

Resources:
  User:
    Type: AWS::IAM:User
    Properties:
      UserName: !Ref UserName
  MyAccessKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref User
      Status: 'Active'
  UserInlinePolicy:
    Type: AWS::IAM:Policy
    DependsOn:
      - ECRRepository
    Properties:
      PolicyName: !Sub ${AWS::StackName}-policy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: 'ECR'
            Effect: 'Allow'
            Action:
              - 'ecr:BatchCheckLayerAvailability'
              - 'ecr:InitiateLayerUpload'
              - 'ecr:UploadLayerPart'
              - 'ecr:CompleteLayerUpload'
              - 'ecr:PutImage'
              - 'ecr:BatchGetImage'
              - 'ecr:BatchImportUpstreamImage'
              - 'ecr:GetDownloadUrlForLayer'
              - 'ecr:GetImageCopyStatus'
            Resource: !GetAtt ECRRepository.Arn
          - Effect: 'Allow'
            Action:
              - 'ecr:GetAuthorizationToken'
            Resource: '*'
          - Sid: 'RegisterTaskDefinition'
            Effect: 'Allow'
            Action:
              - ecs:RegisterTaskDefinition
            Resource: '*'
          - Sid: 'PassRolesInTaskDefinition'
            Effect: 'Allow'
            Action:
              - iam:PassRole
            # Resource: ""
          - Sid: 'DeployService'
            Effect: 'Allow'
            Action:
              - 'ecs:UpdateService'
              - 'ecs:DescribeServices'
            # Resource: ""
      User:
        - !Ref User
  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub ${AWS::StackName}-repo
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
      - HttpTargetGroup
      # - ALBListenerRule
    Properties:
      RequiresCompatibilities:
        - FARGATE
      Family: !Sub ${AWS::StackName}
      ContainerDefinitions:
        - name: !Sub ${AWS::StackName}
          Image: !Join 
            - ':'
            - - !Join 
                - /
                - - !GetAtt ECRRepository.Arn
                  - !Ref ECRRepository
              - latest
          Essential: true
          PortMappings:
            - HostPort: !Ref ContainerPort
              protocol: tcp
              ContainerPort: !Ref ContainerPort
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Join 
                - /
                - ecs
                  - !Sub ${AWS::StackName}
              awslogs-region: us-east-2
              awslogs-stream-prefix: ecs
      NetworkMode: awsvpc
      Memory: '512'
      Cpu: '256'
      # TaskRoleArn: !Ref ECSTaskRoleArn
      # ExecutionRoleArn: !Ref ECSTaskExecutionRoleArn

  HttpTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${AWS::StackName}-tg
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: !Ref HealthCheckPath
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref VpcId
      TargetType: ip
  # ALBListenerRule:
  #   Type: AWS::ElasticLoadBalancingV2::Listener
  ECSService:
    # Type: 'AWS::ECS::Service'
    # DependsOn: TaskDefinition
    # Properties:
    #   ServiceName: !Ref ECSServiceName
  

Outputs:
  UserAccessKeyId:
    Description: User access key ID
    Value: !GetAtt MyAccessKey.Id
  UserAccessKeySecret:
    Description: User secret access key
    Value: !GetAtt MyAccessKey.SecretAccessKey
