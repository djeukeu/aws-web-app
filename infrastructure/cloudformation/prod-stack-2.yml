Parameters:
  AppName:
    Type: String
    Description: The name associate with the project
  HealthCheckPath:
    Type: String
    Default: /
    Description: Health Check path for the server
  Image:
    Type: String
    Description: The image used to launch the app
  ContainerPort:
    Type: Number
    Default: '80'
    Description: Open port for the container
  DesiredCapacity:
    Type: Number
    Default: '1'
    Description: Number of instances to launch in the ECS cluster.

Resources:
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Application load balancer security group for HTTP access
      VpcId: !ImportValue VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 80
          ToPort: 80
  ServerSecurityGroupInboundRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Enable inbound access to the ALB
      SourceSecurityGroupId: !GetAtt ALBSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 3000
      ToPort: 3000
  ServerSecurityGroupOutboundRule:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: Enable outbound access to the ALB
      DestinationSecurityGroupId: !GetAtt ALBSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 3000
      ToPort: 3000
  HttpTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${AppName}-tg
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: !Ref HealthCheckPath
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !ImportValue VPC
      TargetType: ip
  HTTPListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: "HTTP"
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref HttpTargetGroup
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${AppName}-alb
      Scheme: "internet-facing"
      Type: "application"
      Subnets: 
        - !ImportValue PublicSubnetA
        - !ImportValue PublicSubnetB
        - !ImportValue PublicSubnetC
      SecurityGroups: 
        - !Ref ALBSecurityGroup
      IpAddressType: "ipv4"
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
      - HttpTargetGroup
      - HTTPListener
    Properties:
      RequiresCompatibilities:
        - FARGATE
      Family: !Ref AppName
      ContainerDefinitions:
        - Name: !Ref AppName
          Image: !Ref Image
          Essential: true
          PortMappings:
            - HostPort: !Ref ContainerPort
              Protocol: tcp
              ContainerPort: !Ref ContainerPort
      NetworkMode: awsvpc
      Memory: '512'
      Cpu: '256'
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
  ECSTaskExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub ${AppName}-role
      AssumeRolePolicyDocument:
        Version: "2008-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: !Sub ${AppName}-role-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 
                  - "ecr:GetAuthorizationToken"
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:BatchGetImage"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"
  ECSService:
    Type: 'AWS::ECS::Service'
    Properties:
      ServiceName: !Ref AppName
      Cluster: !ImportValue Cluster
      LaunchType: FARGATE
      DesiredCount: !Ref DesiredCapacity
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      HealthCheckGracePeriodSeconds: 5
      TaskDefinition: !Ref TaskDefinition
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups: 
            - !GetAtt ServerSecurityGroupInboundRule.GroupId
            - !GetAtt ServerSecurityGroupOutboundRule.GroupId
          Subnets: 
            - !ImportValue PublicSubnetA
            - !ImportValue PublicSubnetB
            - !ImportValue PublicSubnetC
          AssignPublicIp: ENABLED
      LoadBalancers:
        - ContainerName: !Ref AppName
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref HttpTargetGroup


Outputs:
  LoadBalancerDNS:
    Description: Load Balancer DNS name to access the server 
    Value: !GetAtt ApplicationLoadBalancer.DNSName